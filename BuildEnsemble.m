function Ensemble = BuildEnsemble(X, truth, Scheme)
% Function builds ensemble according to experiment scheme
% Input:
% X - [object x feature] matrix
% truth - [object x 1] labeling
% Scheme
%   * .SourceFunc - Ensemble source function (cell-array of strings or
%   handles)
%   * .SourceFuncParams - Ensemble source functino params (cell-array of structs)
%   * .EnsembleSize - Number of partitions, generated by each ensemble source function (double array)
%   * .ExperimentsNum - Number of experements over a dataset (one experiment = generation of sum(.EnsembleSize) partitions with SourceFunc
%
% Output:
% Ensemble - cell-array of ensemble partitions

numObj = size(X,1);
numSrcFunc = length(Scheme.SourceFunc);
numExper = Scheme.ExperimentsNum;
ariThresholdL = Scheme.AriLowerThreshold;
ariThresholdU = Scheme.AriUpperThreshold;
sizeEns = Scheme.EnsembleSize;

Ensemble = cell(numExper, 1);


if(length(sizeEns) ~= numSrcFunc)
    warning('Matlab:BuildEnsemble','Number of Ensemble Source Functions and corresponded sizes is not equal...');
    sizeEns = sizeEns(1).*ones(numSrcFunc, 1);
end
iExp = 1;
iErr = 1;
errorThreshold = 10;
while iExp <= numExper
    fprintf('-- %d of %d....\n', iExp, numExper);
    CurEnsemble = NaN(numObj, sum(sizeEns));
    aritemp = 0;
    iEns = 1;
    for ifunc = 1:numSrcFunc
        CurEnsemble(:,iEns:iEns+sizeEns(ifunc)-1) = feval(Scheme.SourceFunc{ifunc}, X, sizeEns(ifunc), Scheme.SourceFuncParams{ifunc});
        iEns = iEns+sizeEns(ifunc);
    end
    numPart = size(CurEnsemble,2);
    for ipart = 1:numPart
        aritemp = aritemp + calculateARI(CurEnsemble(:, ipart), truth);
    end
    aritemp = aritemp./numPart;
    if aritemp > ariThresholdU && iErr <= errorThreshold
        fprintf('-- [!] average ARI is too high. Repeat...\n');
        iErr = iErr + 1;
    elseif aritemp < ariThresholdL && iErr <= errorThreshold
        fprintf('-- [!] average ARI is too low. Repeat...\n');
        iErr = iErr + 1;
    else
        Ensemble{iExp} = CurEnsemble;
        iExp = iExp + 1;
        iErr = 1;
    end
end


